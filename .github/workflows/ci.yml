name: CI - Test & Build

# Run on pull requests and pushes to any branch
on:
  pull_request:
    branches:
      - main
  push:
    branches-ignore:
      - main

jobs:
  # Job 1: Run automated tests for Backend (Flask)
  test-backend:
    name: Test Flask Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          if [ -f member1_backend/requirements.txt ]; then
            pip install -r member1_backend/requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          if [ -d member1_backend/tests ]; then
            cd member1_backend
            python -m pytest tests/test_app.py --junitxml=test-results.xml -v
          else
            echo "No backend tests found yet"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: member1_backend/test-results.xml

  # Job 2: Run automated tests for Frontend (React + Vite)
  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm ci
          else
            echo "No frontend package.json found yet"
          fi

      - name: Run frontend tests
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm test -- --run
          else
            echo "No frontend tests found yet"
          fi

      - name: Build frontend
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm run build
          else
            echo "No frontend build script found yet"
          fi

  # Job 3: Verify Docker build (without pushing)
  verify-docker-build:
    name: Verify Backend Docker Build
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./main
          file: ./main/Dockerfile
          push: false
          tags: flask-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: CI Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, verify-docker-build]
    if: always()
    
    steps:
      - name: CI Summary
        run: |
          echo "## CI Pipeline Completed 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build Verification: ${{ needs.verify-docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.test-backend.result }}" == "success" && "${{ needs.test-frontend.result }}" == "success" && "${{ needs.verify-docker-build.result }}" == "success" ]]; then
            echo "✅ **All checks passed! Ready to merge.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed. Please review before merging.**" >> $GITHUB_STEP_SUMMARY
          fi