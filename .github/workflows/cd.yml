name: CD - Deploy

# Run only on pushes to main branch (after merge)
on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_IMAGE_BACKEND: flask-backend
  DOCKER_IMAGE_FRONTEND: react-frontend
  DOCKER_REGISTRY_OWNER: ${{ secrets.DOCKER_HUB_USERNAME || 'local' }}

jobs:
  # Job 1: Build and Push Backend Docker Image to Docker Hub
  deploy-backend:
    name: Build & Push Backend to Docker Hub
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,format=short,prefix=sha-
            type=raw,value=latest,enable=true

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./main
          file: ./main/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Deploy Frontend to GitHub Pages
  deploy-frontend:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # Allow only one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -f member2_frontend/package.json ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend not found yet, skipping deployment"
          fi

      - name: Set up Node.js
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        if: steps.check_frontend.outputs.exists == 'true'
        run: |
          cd member2_frontend
          npm ci

      - name: Build frontend for production
        if: steps.check_frontend.outputs.exists == 'true'
        run: |
          cd member2_frontend
          NODE_ENV=production npm run build

      - name: Setup Pages
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './member2_frontend/dist'

      - name: Deploy to GitHub Pages
        if: steps.check_frontend.outputs.exists == 'true'
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 3: Deployment notification
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Pipeline Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend (Docker Hub): ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend (GitHub Pages): ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "🐳 **Backend deployed to Docker Hub!**" >> $GITHUB_STEP_SUMMARY
            echo "Pull: \`docker pull ${{ env.DOCKER_REGISTRY_OWNER }}/${{ env.DOCKER_IMAGE_BACKEND }}:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "🌐 **Frontend deployed to GitHub Pages!**" >> $GITHUB_STEP_SUMMARY
            echo "Visit: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          fi