name: CI/CD Pipeline

# Trigger on pushes to main branch from any team member
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_IMAGE_BACKEND: flask-backend
  DOCKER_IMAGE_FRONTEND: react-frontend

jobs:
  # Job 1: Run automated tests for Backend (Flask)
  test-backend:
    name: Test Flask Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          if [ -f main/requirements.txt ]; then
            pip install -r main/requirements.txt
          fi
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          if [ -d main/tests ]; then
            cd main
            pytest tests/ --verbose --cov=. --cov-report=term-missing
          else
            echo "No backend tests found yet"
          fi

  # Job 2: Run automated tests for Frontend (React + Vite)
  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install frontend dependencies
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm ci
          else
            echo "No frontend package.json found yet"
          fi

      - name: Run frontend tests
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm test -- --run
          else
            echo "No frontend tests found yet"
          fi

      - name: Build frontend
        run: |
          if [ -f member2_frontend/package.json ]; then
            cd member2_frontend
            npm run build
          else
            echo "No frontend build script found yet"
          fi

  # Job 3: Build Docker image for Backend
  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (Optional)
        if: github.event_name == 'push' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./main
          file: ./main/Dockerfile
          # Push only if Docker Hub credentials are set and it's a push to main
          push: ${{ github.event_name == 'push' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Build Docker image for Frontend
  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: test-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if frontend Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f member2_frontend/Dockerfile ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend Dockerfile not found yet"
          fi

      - name: Set up Docker Buildx
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (Optional)
        if: steps.check_dockerfile.outputs.exists == 'true' && github.event_name == 'push' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        if: steps.check_dockerfile.outputs.exists == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend Docker image
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./member2_frontend
          file: ./member2_frontend/Dockerfile
          # Push only if Docker Hub credentials are set and it's a push to main
          push: ${{ github.event_name == 'push' && secrets.DOCKER_HUB_USERNAME != '' && secrets.DOCKER_HUB_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Deployment notification (optional)
  notify:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## CI/CD Pipeline Completed âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build: ${{ needs.build-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build: ${{ needs.build-frontend.result }}" >> $GITHUB_STEP_SUMMARY
